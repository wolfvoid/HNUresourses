在本问题，定义了图的两种表示方法：邻接表（链表）表示法及邻接矩阵表示法。

         头文件graph.h定义了图的ADT类Graph，头文件grlist.h中定义的类Graphl，实现了使用图的邻接表表示法，头文件grmat.h中定义的类Graphm，实现了图的邻接矩阵表示法，都是Graph类的子类，分别实现了Graph类中定义的所有纯虚方法。

        头文件Graph_test.h中的类option定义了图的相关算法。

        头文件link.h、list.h、llist.h定义了链表的相关操作。

        文件main.cpp为主函数源文件，其中包含了所有针对图的输入以及所有测试选项。

        graphAlg.cbp为基于Code::Blocks的项目文件。

      

        你需要下载压缩文件graphtest.zip，创建一个文件夹，将该文件解压。无论你采用哪种编译器（Code::Blocks或Dev Cpp），都需要创建或打开项目，并将所有头文件以及源代码加入到项目之中。

        你的任务是：

求所有顶点的入度和出度

深度优先搜索(遍历)

广度优先搜索(遍历) 

Dijkstra求最短路(从0点出发至其他各点)

prim算法求最小支撑树(从0点出发至其他各点)



你需要打开头文件grlist.h以及grmat.h，在函数getInDegree以及getOutDegree处填写相关代码，测试完成第1项任务。

你需要打开头文件Graph_test.h，填写相关代码，完成第2~5项任务。

除以上文件相应的位置外，请不要改变其他任何代码，否则将可能不能通过测试。



代码填写时，不必完成所有任务，任何任务都可以单独测试，建议你一项一项完成，提交代码时请将所有头文件以及源文件打包压缩提交。



测试用例有20个：

    1~4：用于测试入度/出度

    5~8：用于测试DFS算法

    9~12：用于测试BFS算法

    13~16：用于测试Dijkstra算法

    17~20：用于测试prim算法



【输入形式】

       输入的第一行为一个整数choice，表示需要测试（执行）的操作或算法

         1.求所有顶点的入度和出度 

         2.深度优先搜索(遍历)

         3.广度优先搜索(遍历) 

         4.Dijkstra求最短路(从0点出发至其他各点)

         5.prim算法求最小支撑树(从0点出发至其他各点)



       输入的第二行为一个整数vert_num，表示树的节点数，编号从0~vert_num-1



       输入的第三行为一个整数graph_type,表示用哪种方法存储图：

         0.用邻接矩阵表示法

         1.用邻接表表示法



       输入的第四行为一个字符graph_dir:

         U.无向图

         D.有向图



       接下来的若干行，每行三个参数，表示图的边，第一个参数为出点，第二个参数为入点，第三个参数为边长（权重）

【注意】输入结束务必使用：“回车 Ctrl+Z 回车”的方式

【输出形式】

       根据第一个参数choice的选择不同，输出对应不同的结果，具体请参照样例输出。